// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServicePlan.Infrastructure;

namespace ServicePlan.Infrastructure.Migrations
{
    [DbContext(typeof(ServicePlanContext))]
    [Migration("20190509111413_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ServicePlan.Domain.AggregateRoot.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("BeginTime");

                    b.Property<DateTime?>("BookTime");

                    b.Property<bool>("Booked");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndTime");

                    b.Property<string>("Location");

                    b.Property<Guid?>("PlanId");

                    b.Property<Guid?>("RoadShowWeekSchedulerId");

                    b.HasKey("Id");

                    b.HasIndex("RoadShowWeekSchedulerId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("ServicePlan.Domain.AggregateRoot.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Creation");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Path")
                        .IsRequired();

                    b.Property<Guid?>("ServicePlanId");

                    b.Property<byte>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ServicePlanId");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("ServicePlan.Domain.AggregateRoot.EmailRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("ResponseTime");

                    b.Property<Guid?>("ServicePlanId");

                    b.Property<bool?>("Success");

                    b.HasKey("Id");

                    b.HasIndex("ServicePlanId");

                    b.ToTable("EmailRecord");
                });

            modelBuilder.Entity("ServicePlan.Domain.AggregateRoot.RoadShowWeekScheduler", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BeginTime");

                    b.Property<DateTime>("EndTime");

                    b.Property<string>("KeyIdeaAndTopic")
                        .HasMaxLength(1000);

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("RoadShowWeekScheduler");
                });

            modelBuilder.Entity("ServicePlan.Domain.AggregateRoot.ServicePlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuditStateId");

                    b.Property<DateTime>("BeginTime");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("EndTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("PlanStateId");

                    b.Property<int>("PlanTypeId");

                    b.Property<int>("ValidationStateId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.ToTable("ServicePlan");
                });

            modelBuilder.Entity("ServicePlan.Domain.AggregateRoot.ServiceRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientFocusKeyPoint");

                    b.Property<bool?>("Continue");

                    b.Property<string>("Feedback");

                    b.Property<string>("IndustryId");

                    b.Property<string>("ModificationRequirement");

                    b.Property<string>("NewRequirement");

                    b.Property<int>("PlanTypeId");

                    b.Property<int?>("Score");

                    b.Property<Guid?>("ServicePlanId");

                    b.Property<DateTime>("ServiceTime");

                    b.Property<string>("Subject");

                    b.HasKey("Id");

                    b.HasIndex("ServicePlanId");

                    b.ToTable("ServiceRecord");
                });

            modelBuilder.Entity("ServicePlan.Domain.AggregateRoot.Appointment", b =>
                {
                    b.HasOne("ServicePlan.Domain.AggregateRoot.RoadShowWeekScheduler")
                        .WithMany("Appointments")
                        .HasForeignKey("RoadShowWeekSchedulerId");

                    b.OwnsMany("ServicePlan.Domain.AggregateRoot.ClientUser", "ClientUsers", b1 =>
                        {
                            b1.Property<Guid>("_id")
                                .ValueGeneratedOnAdd();

                            b1.Property<Guid>("AppointmentId");

                            b1.Property<Guid>("ClientId");

                            b1.Property<string>("ClientName")
                                .HasMaxLength(200);

                            b1.Property<string>("ClientShortName")
                                .HasMaxLength(200);

                            b1.Property<Guid>("ClientUserId");

                            b1.Property<string>("FirstName")
                                .HasMaxLength(50);

                            b1.Property<string>("LastName")
                                .HasMaxLength(50);

                            b1.HasKey("_id");

                            b1.HasIndex("AppointmentId");

                            b1.ToTable("Appointment_ClientUsers");

                            b1.HasOne("ServicePlan.Domain.AggregateRoot.Appointment")
                                .WithMany("ClientUsers")
                                .HasForeignKey("AppointmentId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("ServicePlan.Domain.AggregateRoot.Attachment", b =>
                {
                    b.HasOne("ServicePlan.Domain.AggregateRoot.ServicePlan")
                        .WithMany("Attachments")
                        .HasForeignKey("ServicePlanId");
                });

            modelBuilder.Entity("ServicePlan.Domain.AggregateRoot.EmailRecord", b =>
                {
                    b.HasOne("ServicePlan.Domain.AggregateRoot.ServicePlan")
                        .WithMany("EmailRecords")
                        .HasForeignKey("ServicePlanId");

                    b.OwnsOne("ServicePlan.Domain.AggregateRoot.ClientUser", "ClientUser", b1 =>
                        {
                            b1.Property<Guid>("EmailRecordId");

                            b1.Property<Guid>("ClientId");

                            b1.Property<string>("ClientName")
                                .HasMaxLength(200);

                            b1.Property<string>("ClientShortName")
                                .HasMaxLength(200);

                            b1.Property<Guid>("ClientUserId");

                            b1.Property<string>("FirstName")
                                .HasMaxLength(100);

                            b1.Property<string>("LastName")
                                .HasMaxLength(100);

                            b1.HasKey("EmailRecordId");

                            b1.ToTable("EmailRecord");

                            b1.HasOne("ServicePlan.Domain.AggregateRoot.EmailRecord")
                                .WithOne("ClientUser")
                                .HasForeignKey("ServicePlan.Domain.AggregateRoot.ClientUser", "EmailRecordId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("ServicePlan.Domain.AggregateRoot.RoadShowWeekScheduler", b =>
                {
                    b.OwnsOne("ServicePlan.Domain.AggregateRoot.User", "User", b1 =>
                        {
                            b1.Property<Guid>("RoadShowWeekSchedulerId");

                            b1.Property<string>("Email")
                                .HasMaxLength(200);

                            b1.Property<string>("FirstName")
                                .HasMaxLength(100);

                            b1.Property<string>("GroupName")
                                .HasMaxLength(200);

                            b1.Property<string>("LastName")
                                .HasMaxLength(100);

                            b1.Property<string>("TeamName")
                                .HasMaxLength(200);

                            b1.Property<Guid>("UserId");

                            b1.HasKey("RoadShowWeekSchedulerId");

                            b1.ToTable("RoadShowWeekScheduler");

                            b1.HasOne("ServicePlan.Domain.AggregateRoot.RoadShowWeekScheduler")
                                .WithOne("User")
                                .HasForeignKey("ServicePlan.Domain.AggregateRoot.User", "RoadShowWeekSchedulerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("ServicePlan.Domain.AggregateRoot.ServicePlan", b =>
                {
                    b.OwnsMany("ServicePlan.Domain.AggregateRoot.AuditHistory", "AuditHistory", b1 =>
                        {
                            b1.Property<Guid>("_id")
                                .ValueGeneratedOnAdd();

                            b1.Property<string>("Operation")
                                .HasMaxLength(100);

                            b1.Property<string>("Result")
                                .HasMaxLength(300);

                            b1.Property<Guid>("ServicePlanId");

                            b1.HasKey("_id");

                            b1.HasIndex("ServicePlanId");

                            b1.ToTable("AuditHistory");

                            b1.HasOne("ServicePlan.Domain.AggregateRoot.ServicePlan")
                                .WithMany("AuditHistory")
                                .HasForeignKey("ServicePlanId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("ServicePlan.Domain.AggregateRoot.User", "User", b2 =>
                                {
                                    b2.Property<Guid>("AuditHistory_id");

                                    b2.Property<string>("Email")
                                        .HasMaxLength(200);

                                    b2.Property<string>("FirstName")
                                        .HasMaxLength(100);

                                    b2.Property<string>("GroupName")
                                        .HasMaxLength(100);

                                    b2.Property<string>("LastName")
                                        .HasMaxLength(100);

                                    b2.Property<string>("TeamName")
                                        .HasMaxLength(100);

                                    b2.Property<Guid>("UserId");

                                    b2.HasKey("AuditHistory_id");

                                    b2.ToTable("AuditHistory");

                                    b2.HasOne("ServicePlan.Domain.AggregateRoot.AuditHistory")
                                        .WithOne("User")
                                        .HasForeignKey("ServicePlan.Domain.AggregateRoot.User", "AuditHistory_id")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });

                    b.OwnsOne("ServicePlan.Domain.AggregateRoot.DataReport", "DataReport", b1 =>
                        {
                            b1.Property<Guid>("ServicePlanId");

                            b1.Property<string>("Abstract")
                                .HasMaxLength(2000);

                            b1.Property<string>("ReportTitle")
                                .HasMaxLength(200);

                            b1.HasKey("ServicePlanId");

                            b1.ToTable("ServicePlan");

                            b1.HasOne("ServicePlan.Domain.AggregateRoot.ServicePlan")
                                .WithOne("DataReport")
                                .HasForeignKey("ServicePlan.Domain.AggregateRoot.DataReport", "ServicePlanId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("ServicePlan.Domain.AggregateRoot.Product", "Product", b1 =>
                        {
                            b1.Property<Guid>("ServicePlanId");

                            b1.Property<string>("Name")
                                .HasMaxLength(200);

                            b1.Property<Guid>("ProductId");

                            b1.Property<byte>("Type");

                            b1.HasKey("ServicePlanId");

                            b1.ToTable("ServicePlan");

                            b1.HasOne("ServicePlan.Domain.AggregateRoot.ServicePlan")
                                .WithOne("Product")
                                .HasForeignKey("ServicePlan.Domain.AggregateRoot.Product", "ServicePlanId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsMany("ServicePlan.Domain.AggregateRoot.ClientUser", "Subscriber", b2 =>
                                {
                                    b2.Property<Guid>("_id")
                                        .ValueGeneratedOnAdd();

                                    b2.Property<Guid>("ClientId");

                                    b2.Property<string>("ClientName")
                                        .HasMaxLength(200);

                                    b2.Property<string>("ClientShortName")
                                        .HasMaxLength(200);

                                    b2.Property<Guid>("ClientUserId");

                                    b2.Property<string>("FirstName")
                                        .HasMaxLength(50);

                                    b2.Property<string>("LastName")
                                        .HasMaxLength(50);

                                    b2.Property<Guid>("ProductServicePlanId");

                                    b2.HasKey("_id");

                                    b2.HasIndex("ProductServicePlanId");

                                    b2.ToTable("ServicePlan_Subscriber");

                                    b2.HasOne("ServicePlan.Domain.AggregateRoot.Product")
                                        .WithMany("Subscriber")
                                        .HasForeignKey("ProductServicePlanId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });

                    b.OwnsOne("ServicePlan.Domain.AggregateRoot.RoadShow", "RoadShow", b1 =>
                        {
                            b1.Property<Guid>("ServicePlanId");

                            b1.Property<string>("Address")
                                .HasMaxLength(500);

                            b1.HasKey("ServicePlanId");

                            b1.ToTable("ServicePlan");

                            b1.HasOne("ServicePlan.Domain.AggregateRoot.ServicePlan")
                                .WithOne("RoadShow")
                                .HasForeignKey("ServicePlan.Domain.AggregateRoot.RoadShow", "ServicePlanId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsMany("ServicePlan.Domain.AggregateRoot.ClientUser", "ClientUsers", b2 =>
                                {
                                    b2.Property<Guid>("_id")
                                        .ValueGeneratedOnAdd();

                                    b2.Property<Guid>("ClientId");

                                    b2.Property<string>("ClientName")
                                        .HasMaxLength(200);

                                    b2.Property<string>("ClientShortName")
                                        .HasMaxLength(200);

                                    b2.Property<Guid>("ClientUserId");

                                    b2.Property<string>("FirstName")
                                        .HasMaxLength(50);

                                    b2.Property<string>("LastName")
                                        .HasMaxLength(50);

                                    b2.Property<Guid>("RoadShowServicePlanId");

                                    b2.HasKey("_id");

                                    b2.HasIndex("RoadShowServicePlanId");

                                    b2.ToTable("ServicePlan_ClientUsers");

                                    b2.HasOne("ServicePlan.Domain.AggregateRoot.RoadShow")
                                        .WithMany("ClientUsers")
                                        .HasForeignKey("RoadShowServicePlanId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });

                    b.OwnsOne("ServicePlan.Domain.AggregateRoot.User", "AuditUser", b1 =>
                        {
                            b1.Property<Guid>("ServicePlanId");

                            b1.Property<string>("Email")
                                .HasMaxLength(200);

                            b1.Property<string>("FirstName")
                                .HasMaxLength(100);

                            b1.Property<string>("GroupName")
                                .HasMaxLength(200);

                            b1.Property<string>("LastName")
                                .HasMaxLength(100);

                            b1.Property<string>("TeamName")
                                .HasMaxLength(200);

                            b1.Property<Guid>("UserId");

                            b1.HasKey("ServicePlanId");

                            b1.ToTable("ServicePlan");

                            b1.HasOne("ServicePlan.Domain.AggregateRoot.ServicePlan")
                                .WithOne("AuditUser")
                                .HasForeignKey("ServicePlan.Domain.AggregateRoot.User", "ServicePlanId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("ServicePlan.Domain.AggregateRoot.User", "Creator", b1 =>
                        {
                            b1.Property<Guid>("ServicePlanId");

                            b1.Property<string>("Email")
                                .HasMaxLength(200);

                            b1.Property<string>("FirstName")
                                .HasMaxLength(100);

                            b1.Property<string>("GroupName")
                                .HasMaxLength(200);

                            b1.Property<string>("LastName")
                                .HasMaxLength(100);

                            b1.Property<string>("TeamName")
                                .HasMaxLength(200);

                            b1.Property<Guid>("UserId");

                            b1.HasKey("ServicePlanId");

                            b1.ToTable("ServicePlan");

                            b1.HasOne("ServicePlan.Domain.AggregateRoot.ServicePlan")
                                .WithOne("Creator")
                                .HasForeignKey("ServicePlan.Domain.AggregateRoot.User", "ServicePlanId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("ServicePlan.Domain.AggregateRoot.User", "QcUser", b1 =>
                        {
                            b1.Property<Guid>("ServicePlanId");

                            b1.Property<string>("Email")
                                .HasMaxLength(200);

                            b1.Property<string>("FirstName")
                                .HasMaxLength(100);

                            b1.Property<string>("GroupName")
                                .HasMaxLength(200);

                            b1.Property<string>("LastName")
                                .HasMaxLength(100);

                            b1.Property<string>("TeamName")
                                .HasMaxLength(200);

                            b1.Property<Guid>("UserId");

                            b1.HasKey("ServicePlanId");

                            b1.ToTable("ServicePlan");

                            b1.HasOne("ServicePlan.Domain.AggregateRoot.ServicePlan")
                                .WithOne("QcUser")
                                .HasForeignKey("ServicePlan.Domain.AggregateRoot.User", "ServicePlanId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("ServicePlan.Domain.AggregateRoot.User", "User", b1 =>
                        {
                            b1.Property<Guid>("ServicePlanId");

                            b1.Property<string>("Email")
                                .HasMaxLength(200);

                            b1.Property<string>("FirstName")
                                .HasMaxLength(100);

                            b1.Property<string>("GroupName")
                                .HasMaxLength(200);

                            b1.Property<string>("LastName")
                                .HasMaxLength(100);

                            b1.Property<string>("TeamName")
                                .HasMaxLength(200);

                            b1.Property<Guid>("UserId");

                            b1.HasKey("ServicePlanId");

                            b1.ToTable("ServicePlan");

                            b1.HasOne("ServicePlan.Domain.AggregateRoot.ServicePlan")
                                .WithOne("User")
                                .HasForeignKey("ServicePlan.Domain.AggregateRoot.User", "ServicePlanId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("ServicePlan.Domain.AggregateRoot.ServiceRecord", b =>
                {
                    b.HasOne("ServicePlan.Domain.AggregateRoot.ServicePlan")
                        .WithMany("ServiceRecords")
                        .HasForeignKey("ServicePlanId");

                    b.OwnsMany("ServicePlan.Domain.AggregateRoot.ClientUser", "ClientUsers", b1 =>
                        {
                            b1.Property<Guid>("_id")
                                .ValueGeneratedOnAdd();

                            b1.Property<Guid>("ClientId");

                            b1.Property<string>("ClientName")
                                .HasMaxLength(200);

                            b1.Property<string>("ClientShortName")
                                .HasMaxLength(200);

                            b1.Property<Guid>("ClientUserId");

                            b1.Property<string>("FirstName")
                                .HasMaxLength(100);

                            b1.Property<string>("LastName")
                                .HasMaxLength(100);

                            b1.Property<Guid>("ServiceRecordId");

                            b1.HasKey("_id");

                            b1.HasIndex("ServiceRecordId");

                            b1.ToTable("ServiceRecord_ClientUsers");

                            b1.HasOne("ServicePlan.Domain.AggregateRoot.ServiceRecord")
                                .WithMany("ClientUsers")
                                .HasForeignKey("ServiceRecordId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
